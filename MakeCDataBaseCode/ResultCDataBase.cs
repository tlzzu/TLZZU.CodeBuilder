class Demo
{
    public static string GetDB()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        sb.AppendLine("using Oracle.DataAccess.Client;");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Collections.Specialized;");
        sb.AppendLine("using System.ComponentModel;");
        sb.AppendLine("using System.Configuration;");
        sb.AppendLine("using System.Data;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("using System.Text;");
        sb.AppendLine("");
        sb.AppendLine("#region 数据库操作类");
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// 数据库操作类");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("internal class OracleHelper");
        sb.AppendLine("{");
        sb.AppendLine("    private static object objlock = new object();");
        sb.AppendLine("    private static string ConnString");
        sb.AppendLine("    {");
        sb.AppendLine("        get");
        sb.AppendLine("        {");
        sb.AppendLine("            return System.Configuration.ConfigurationSettings.AppSettings[\"oracleConn\"];");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// 获取数据库连接实体");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    public static System.Data.OracleClient.OracleConnection Instant");
        sb.AppendLine("    {");
        sb.AppendLine("        get");
        sb.AppendLine("        {");
        sb.AppendLine("            if (System.Web.HttpContext.Current.Items[\"_oracleConn\"] == null)");
        sb.AppendLine("            {");
        sb.AppendLine("                lock (objlock)");
        sb.AppendLine("                {");
        sb.AppendLine("                    if (System.Web.HttpContext.Current.Items[\"_oracleConn\"] == null)");
        sb.AppendLine("                    {");
        sb.AppendLine("                        var temp = new System.Data.OracleClient.OracleConnection(ConnString);");
        sb.AppendLine("                        System.Web.HttpContext.Current.Items[\"_oracleConn\"] = temp;");
        sb.AppendLine("                    }");
        sb.AppendLine("                }");
        sb.AppendLine("            }");
        sb.AppendLine("            var instant = System.Web.HttpContext.Current.Items[\"_oracleConn\"] as System.Data.OracleClient.OracleConnection;");
        sb.AppendLine("            if (instant.State != System.Data.ConnectionState.Open)");
        sb.AppendLine("                instant.Open();");
        sb.AppendLine("            return instant;");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// 放回序列");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <param name=\"vSequenceName\"></param>");
        sb.AppendLine("    /// <returns></returns>");
        sb.AppendLine("    public static long GetNextValue(string vSequenceName)");
        sb.AppendLine("    {");
        sb.AppendLine("        var command = Instant.CreateCommand();");
        sb.AppendLine("        command.CommandText = string.Format(\"select {0}.nextval from dual\",vSequenceName);");
        sb.AppendLine("        object lo_obj = command.ExecuteScalar();");
        sb.AppendLine("        return lo_obj == null ? -1 : Convert.ToInt64(lo_obj);");
        sb.AppendLine("    }");
        sb.AppendLine("");
        sb.AppendLine("    public static IList<T> GetDataItems<T>(OracleCommand command) where T : class, new()");
        sb.AppendLine("    {");
        sb.AppendLine("        var result = new List<T>();");
        sb.AppendLine("        var reader = command.ExecuteReader();");
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine("            if (!reader.HasRows)");
        sb.AppendLine("            {");
        sb.AppendLine("                reader.Close();");
        sb.AppendLine("                return result;");
        sb.AppendLine("            }");
        sb.AppendLine("            Type typeFromHandle = typeof(T);");
        sb.AppendLine("            var inner = from i in Enumerable.Range(1, reader.FieldCount)");
        sb.AppendLine("                        select new");
        sb.AppendLine("                        {");
        sb.AppendLine("                            Name = reader.GetName(i - 1),");
        sb.AppendLine("                            Index = i - 1");
        sb.AppendLine("                        };");
        sb.AppendLine("            var enumerable = typeFromHandle.GetProperties().Join(inner, x => x.Name, x => x.Name, (x, y) => new { y.Index, x });");
        sb.AppendLine("            while (reader.Read())");
        sb.AppendLine("            {");
        sb.AppendLine("                T t = Activator.CreateInstance<T>();");
        sb.AppendLine("                foreach (var current in enumerable)");
        sb.AppendLine("                {");
        sb.AppendLine("                    if (reader[current.Index].GetType() != typeof(DBNull))");
        sb.AppendLine("                    {");
        sb.AppendLine("                        if (current.x.PropertyType.IsGenericType && current.x.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))");
        sb.AppendLine("                        {");
        sb.AppendLine("                            current.x.SetValue(t, new NullableConverter(current.x.PropertyType).ConvertFromString(reader[current.Index].ToString()), null);");
        sb.AppendLine("                        }");
        sb.AppendLine("                        else");
        sb.AppendLine("                            current.x.SetValue(t, Convert.ChangeType(reader[current.Index], current.x.PropertyType), null);");
        sb.AppendLine("                    }");
        sb.AppendLine("                }");
        sb.AppendLine("                result.Add(t);");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine("        catch (Exception ex)");
        sb.AppendLine("        {");
        sb.AppendLine("            throw ex;");
        sb.AppendLine("        }");
        sb.AppendLine("        finally");
        sb.AppendLine("        {");
        sb.AppendLine("            reader.Close();");
        sb.AppendLine("        }");
        sb.AppendLine("        return result;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        sb.AppendLine("#endregion");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//#region 数据库访问");
        sb.AppendLine("//using Oracle.DataAccess.Client;");
        sb.AppendLine("//using System;");
        sb.AppendLine("//using System.Collections.Generic;");
        sb.AppendLine("//using System.Collections.Specialized;");
        sb.AppendLine("//using System.ComponentModel;");
        sb.AppendLine("//using System.Configuration;");
        sb.AppendLine("//using System.Data;");
        sb.AppendLine("//using System.Linq;");
        sb.AppendLine("//using System.Text;");
        sb.AppendLine("//using System.Threading.Tasks;");
        sb.AppendLine("//internal class VariableInfo");
        sb.AppendLine("//{");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 应用程序级变量(配置文件和Application中变量的集合)");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    public class ApplicationVar");
        sb.AppendLine("//    {");
        sb.AppendLine("//        private static string _applname;");
        sb.AppendLine("//        private static string _appldm;");
        sb.AppendLine("//        private static string _znqxglmkdm;//组内权限管理模块代码");
        sb.AppendLine("//        private static string _dwdm;");
        sb.AppendLine("//        private static string _dwmc;");
        sb.AppendLine("//        private static string _ywdwmc;  //英文单位名称");
        sb.AppendLine("//        private static string _servicephone;  //服务电话");
        sb.AppendLine("//        private static string _HaveGlobalAccessControl;");
        sb.AppendLine("//        private static long _ApplTotalLoginUserCount;");
        sb.AppendLine("//        private static long _OnLineUserCount;");
        sb.AppendLine("//        private static string _sbyxbs;");
        sb.AppendLine("//        private static string _sbyljgdm;//社保医疗机构代码");
        sb.AppendLine("//        private static string _nbyljgdm;//农保医疗机构代码");
        sb.AppendLine("//        private static string _nbqzjdz;//农保前置机网络地址：IP+端口号");
        sb.AppendLine("//        private static int? _xtggid;//系统公告信息ID号");
        sb.AppendLine("//        private static string _oaxxlb;//oa系统短信的消息类别");
        sb.AppendLine("//        private static System.Object _LockObj1 = new object();");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 应用程序名称");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static string ApplName");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_applname))");
        sb.AppendLine("//                    _applname = System.Configuration.ConfigurationManager.AppSettings[\"applname\"];");
        sb.AppendLine("//                return _applname;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            set");
        sb.AppendLine("//            {");
        sb.AppendLine("//                _applname = value;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// oa系统短信的消息类别");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static string OAXXLB");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_oaxxlb))");
        sb.AppendLine("//                    _oaxxlb = System.Configuration.ConfigurationManager.AppSettings[\"oaxxlb\"];");
        sb.AppendLine("//                return _oaxxlb;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            set");
        sb.AppendLine("//            {");
        sb.AppendLine("//                _oaxxlb = value;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 应用程序代码");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static string ApplDm");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_appldm))");
        sb.AppendLine("//                    _appldm = System.Configuration.ConfigurationManager.AppSettings[\"appldm\"];");
        sb.AppendLine("//                return _appldm;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            set");
        sb.AppendLine("//            {");
        sb.AppendLine("//                _appldm = value;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 组内权限管理模块代码");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static string ZNQXGLMKDM");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_znqxglmkdm))");
        sb.AppendLine("//                    _znqxglmkdm = System.Configuration.ConfigurationManager.AppSettings[\"znqxglmkdm\"];");
        sb.AppendLine("//                return _znqxglmkdm;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            set");
        sb.AppendLine("//            {");
        sb.AppendLine("//                _znqxglmkdm = value;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 系统公告ID");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static int? XTGGID");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (!_xtggid.HasValue)");
        sb.AppendLine("//                    _xtggid = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings[\"xtggid\"]);");
        sb.AppendLine("//                return _xtggid;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            set");
        sb.AppendLine("//            {");
        sb.AppendLine("//                _xtggid = value;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 当前登录用户人数（即当前在线人数）");
        sb.AppendLine("//        /// *注意* 使用 OnLineUserCount++会导致ApplTotalLoginUserCount自动加一");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static long OnLineUserCount");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                lock (_LockObj1)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    if (_OnLineUserCount < 0)");
        sb.AppendLine("//                        _OnLineUserCount = 0;");
        sb.AppendLine("//                    return _OnLineUserCount;");
        sb.AppendLine("//                }");
        sb.AppendLine("//            }");
        sb.AppendLine("//            set");
        sb.AppendLine("//            {");
        sb.AppendLine("//                lock (_LockObj1)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    if (_OnLineUserCount == value - 1)");
        sb.AppendLine("//                    {");
        sb.AppendLine("//                        _ApplTotalLoginUserCount++;");
        sb.AppendLine("//                    }");
        sb.AppendLine("//                    _OnLineUserCount = value;");
        sb.AppendLine("//                }");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 单位代码");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static string dwdm");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_dwdm))");
        sb.AppendLine("//                    _dwdm = System.Configuration.ConfigurationManager.AppSettings[\"dwdm\"];");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_dwdm)) _dwdm = \"01\";");
        sb.AppendLine("//                return _dwdm;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            set");
        sb.AppendLine("//            {");
        sb.AppendLine("//                _dwdm = value;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 单位名称");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static string dwmc");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_dwmc))");
        sb.AppendLine("//                    _dwmc = System.Configuration.ConfigurationManager.AppSettings[\"dwmc\"];");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_dwmc)) _dwmc = \"温州医院\";");
        sb.AppendLine("//                return _dwmc;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            set");
        sb.AppendLine("//            {");
        sb.AppendLine("//                _dwmc = value;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 英文单位名称");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static string ywdwmc");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_ywdwmc))");
        sb.AppendLine("//                    _ywdwmc = System.Configuration.ConfigurationManager.AppSettings[\"ywdwmc\"];");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_ywdwmc)) _ywdwmc = \"WenZhou Hospital\";");
        sb.AppendLine("//                return _ywdwmc;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            set");
        sb.AppendLine("//            {");
        sb.AppendLine("//                _ywdwmc = value;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 服务电话(错误页中用到)");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static string servicephone");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_servicephone))");
        sb.AppendLine("//                    _servicephone = System.Configuration.ConfigurationManager.AppSettings[\"servicephone\"];");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_servicephone)) _servicephone = \"没有登记服务电话\";");
        sb.AppendLine("//                return _servicephone;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            set");
        sb.AppendLine("//            {");
        sb.AppendLine("//                _servicephone = value;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 全局页面访问控制模式");
        sb.AppendLine("//        /// \"0\" 不控制");
        sb.AppendLine("//        /// \"1\" 已经登记的页面按权限访问，没有登记则不控制访问");
        sb.AppendLine("//        /// \"2\" 已经登记的页面按权限访问，没有登记则禁止访问");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static string GlobalAccessControl");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_HaveGlobalAccessControl))");
        sb.AppendLine("//                    _HaveGlobalAccessControl = System.Configuration.ConfigurationManager.AppSettings[\"GlobalAccessControl\"];");
        sb.AppendLine("//                return _HaveGlobalAccessControl;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            set");
        sb.AppendLine("//            {");
        sb.AppendLine("//                _HaveGlobalAccessControl = value;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 农保医疗机构代码");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static string NBYLJGDM");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_nbyljgdm))");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    lock (_LockObj1)");
        sb.AppendLine("//                    {");
        sb.AppendLine("");
        sb.AppendLine("//                        _nbyljgdm = \"1001\";");
        sb.AppendLine("//                    }");
        sb.AppendLine("//                }");
        sb.AppendLine("//                return _nbyljgdm;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        /// <summary>");
        sb.AppendLine("//        /// 农保前置机IP地址及端口号");
        sb.AppendLine("//        /// </summary>");
        sb.AppendLine("//        public static string NBQZJDZ");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (string.IsNullOrEmpty(_nbqzjdz))");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    lock (_LockObj1)");
        sb.AppendLine("//                    {");
        sb.AppendLine("");
        sb.AppendLine("//                        _nbqzjdz = \"172.16.12.92:9999\";");
        sb.AppendLine("//                    }");
        sb.AppendLine("//                }");
        sb.AppendLine("//                return _nbqzjdz;");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//}");
        sb.AppendLine("///// <summary>");
        sb.AppendLine("///// 自定义异常类");
        sb.AppendLine("///// </summary>");
        sb.AppendLine("//internal class CustomException : ApplicationException");
        sb.AppendLine("//{");
        sb.AppendLine("//    private string _ipAddress;  //客户端ip地址");
        sb.AppendLine("//    private string _czz;        //操作者");
        sb.AppendLine("//    private Int64 _idczz;       //操作者ID    ");
        sb.AppendLine("//    private string _url;        //出错页面");
        sb.AppendLine("//    private string _userAgent;  //客户段浏览器代理信息");
        sb.AppendLine("//    private CustomExceptionType _exceptionType;");
        sb.AppendLine("//    private bool _loged = false;");
        sb.AppendLine("//    private string _hostname;");
        sb.AppendLine("//    protected void Init()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//            _exceptionType = CustomExceptionType.UnKnowException;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        catch (Exception ex)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            System.Diagnostics.Debug.Write(ex.Message);");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    #region 构造函数");
        sb.AppendLine("//    public CustomException(CustomExceptionType exceptionType, string message, Exception innerException)");
        sb.AppendLine("//        : base(message, innerException)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        Init();");
        sb.AppendLine("//        _exceptionType = exceptionType;");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//    public CustomException(string message, Exception innerException)");
        sb.AppendLine("//        : base(message, innerException)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        Init();");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    public CustomException(CustomExceptionType exceptionType, string message)");
        sb.AppendLine("//        : base(message)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        Init();");
        sb.AppendLine("//        _exceptionType = exceptionType;");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    public CustomException(string message)");
        sb.AppendLine("//        : base(message)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        Init();");
        sb.AppendLine("//    }");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("");
        sb.AppendLine("//    #region 属性");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 获取包括InnerException的所有异常信息");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    public virtual string MessageAll");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            string ls_msg = base.Message;");
        sb.AppendLine("");
        sb.AppendLine("//            if (InnerException != null)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                CustomException blex = InnerException as CustomException;");
        sb.AppendLine("//                if (blex != null)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    if (string.IsNullOrEmpty(ls_msg))");
        sb.AppendLine("//                        ls_msg = blex.MessageAll;");
        sb.AppendLine("//                    else");
        sb.AppendLine("//                        ls_msg = ls_msg + \",\" + blex.MessageAll;");
        sb.AppendLine("//                }");
        sb.AppendLine("//                else");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    if (string.IsNullOrEmpty(ls_msg))");
        sb.AppendLine("//                        ls_msg = InnerException.Message;");
        sb.AppendLine("//                    else");
        sb.AppendLine("//                        ls_msg = ls_msg + \",错误原因：\" + InnerException.Message;");
        sb.AppendLine("//                }");
        sb.AppendLine("//            }");
        sb.AppendLine("");
        sb.AppendLine("//            return ls_msg;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 客户端IP地址");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    public string IPAddress");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _ipAddress;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 操作者");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    public string Czz");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _czz;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 操作者ID");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    public Int64 IDCzz");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _idczz;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 出错页面");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    public string URL");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _url;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 客户段浏览器代理信息");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    public string UserAgent");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _userAgent;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public string HostName");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _hostname;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    public string YYDM");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return VariableInfo.ApplicationVar.ApplDm;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 异常类型");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    public CustomExceptionType ExceptionType");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _exceptionType;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("");
        sb.AppendLine("//}");
        sb.AppendLine("///// <summary>");
        sb.AppendLine("///// 异常类型");
        sb.AppendLine("///// </summary>");
        sb.AppendLine("//internal enum CustomExceptionType");
        sb.AppendLine("//{");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//    //------------101-200为一般等级的异常类型--------//");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 验证异常");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    Validate = 101,");
        sb.AppendLine("");
        sb.AppendLine("//    //----------------------------------------------//");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//    //------------201-300为严重等级的异常类型--------//");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 严重的异常");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    Serious = 201,");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 数据库访问异常");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    DataAccess = 202,");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 获取数据库数据异常");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    Select = 203,");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 插入数据库数据异常");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    Insert = 204,");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 更新数据库数据异常");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    Update = 205,");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 删除数据库数据异常");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    Delete = 206,");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 更新并发异常");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    UpdateConcurrency = 207,");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 删除并发异常");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    DeleteConcurrency = 208,");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//    //------------------------------------");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 未知异常");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    UnKnowException = 999");
        sb.AppendLine("");
        sb.AppendLine("//}");
        sb.AppendLine("//internal partial class CDataBase : IDisposable");
        sb.AppendLine("//{");
        sb.AppendLine("");
        sb.AppendLine("//    public void ParametersClear()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        this.Parameters.Clear();");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    public void ParametersAdd(string key, object value)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        this.Parameters.Add(key, value);");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    public IList<T> GetDataItems<T>(string sql) where T : class, new()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("//            this.iCommand.CommandText = sql;");
        sb.AppendLine("//            this._iReader = this.iCommand.ExecuteReader();");
        sb.AppendLine("//            if (!this._iReader.HasRows)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                this._iReader.Close();");
        sb.AppendLine("//                return new List<T>();");
        sb.AppendLine("//            }");
        sb.AppendLine("//            Type typeFromHandle = typeof(T);");
        sb.AppendLine("//            var inner =");
        sb.AppendLine("//                from i in Enumerable.Range(1, this._iReader.FieldCount)");
        sb.AppendLine("//                select new");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    Name = this._iReader.GetName(i - 1),");
        sb.AppendLine("//                    Index = i - 1");
        sb.AppendLine("//                };");
        sb.AppendLine("//            var enumerable = typeFromHandle.GetProperties().Join(inner, x => x.Name, x => x.Name, (x, y) => new { y.Index, x });");
        sb.AppendLine("//            List<T> list = new List<T>();");
        sb.AppendLine("//            while (this._iReader.Read())");
        sb.AppendLine("//            {");
        sb.AppendLine("//                T t = Activator.CreateInstance<T>();");
        sb.AppendLine("//                foreach (var current in enumerable)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    //tempType = current;");
        sb.AppendLine("//                    //isNull = \"isNull\";");
        sb.AppendLine("//                    //isNull = this._iReader[current.Index].ToString();");
        sb.AppendLine("");
        sb.AppendLine("//                    if (this._iReader[current.Index].GetType() != typeof(DBNull))");
        sb.AppendLine("//                    {");
        sb.AppendLine("//                        try");
        sb.AppendLine("//                        {");
        sb.AppendLine("//                            if (current.x.PropertyType.IsGenericType && current.x.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))");
        sb.AppendLine("//                            {");
        sb.AppendLine("//                                current.x.SetValue(t, new NullableConverter(current.x.PropertyType).ConvertFromString(this._iReader[current.Index].ToString()), null);");
        sb.AppendLine("//                            }");
        sb.AppendLine("//                            else");
        sb.AppendLine("//                                current.x.SetValue(t, Convert.ChangeType(this._iReader[current.Index], current.x.PropertyType), null);");
        sb.AppendLine("");
        sb.AppendLine("//                        }");
        sb.AppendLine("//                        catch (Exception exe)");
        sb.AppendLine("//                        {");
        sb.AppendLine("//                            throw exe;");
        sb.AppendLine("//                            //Lenovo.Tool.Log4NetHelper.Error(exe);");
        sb.AppendLine("//                        }");
        sb.AppendLine("//                    }");
        sb.AppendLine("//                }");
        sb.AppendLine("//                list.Add(t);");
        sb.AppendLine("//            }");
        sb.AppendLine("//            this._iReader.Close();");
        sb.AppendLine("//            return list;");
        sb.AppendLine("");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //catch (Oracle.DataAccess.Client.OracleException oracleException)");
        sb.AppendLine("//        //{");
        sb.AppendLine("//        //    if (oracleException.Number == 3113)");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        return GetDataItems<T>(sql);");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //    else");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        throw oracleException;");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //}");
        sb.AppendLine("//        catch (Exception ex)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            throw ex;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//    #region 类成员定义");
        sb.AppendLine("//    //实例化后成员：Oracle连接");
        sb.AppendLine("//    private OracleConnection iConnection;    //Connect执行成功后：Oracle连接");
        sb.AppendLine("//    private OracleCommand iCommand;          //实例化后成员：Oracle命令");
        sb.AppendLine("//    private OracleCommand _DataTableSelectCommand;//SetDataTable后的可用成员：Oracle命令");
        sb.AppendLine("//    private OracleDataAdapter _iAdapter;      //SetDateSet：OracleAdapter");
        sb.AppendLine("//    private OracleDataReader _iReader;        //SetReader执行成功后：OracleReader");
        sb.AppendLine("//    private DataTable _iDataTable;");
        sb.AppendLine("//    private int _SqlNRows = -1;                 //ExeSQL执行后影响到的行数 -1表示未执行sql语句或不确定几条记录");
        sb.AppendLine("//    private int _SqlCode = -1;                 //ExeSQL执行成功还是失败，－1失败 0成功");
        sb.AppendLine("//    public string _SqlErrorText;");
        sb.AppendLine("");
        sb.AppendLine("//    private OracleTransaction iTrans;       //Connect执行成功后：事务处理对象  bm zsm mm constr");
        sb.AppendLine("//    //private static Dictionary<string, string> DbConnection = new Dictionary<string, string>();");
        sb.AppendLine("//    //private static Dictionary<string, string> DbConnStr = new Dictionary<string, string>();");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 数据库用户集合，《 <数据库号，用户名>,连接串》");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    private static Dictionary<KeyValuePair<int, string>, string> _dbuser = new Dictionary<KeyValuePair<int, string>, string>();");
        sb.AppendLine("//    private bool disposed = false;");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("//    #region 公有属性");
        sb.AppendLine("//    public OracleDataAdapter iAdapter");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _iAdapter;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public OracleDataReader iReader");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _iReader;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public DataTable iDataTable");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _iDataTable;//db.iDataTable[0][0].;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public int SqlNRows");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _SqlNRows;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public int SqlCode");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _SqlCode;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public string SqlErrorText");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return _SqlErrorText;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// 只读属性 OracleParameterCollection");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    public OracleParameterCollection Parameters");
        sb.AppendLine("//    {");
        sb.AppendLine("//        get");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return iCommand.Parameters;");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 返回datatable");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("//    #region 构造函数和析构函数及资源的释放管理");
        sb.AppendLine("//    //.............开始实例化后的方法定义.....................");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 实例化iCommand,iAdapter,iDataSet三个成员");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    public CDataBase()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        iCommand = new OracleCommand();");
        sb.AppendLine("//        iCommand.BindByName = true;");
        sb.AppendLine("//        Connect(0, ConfigurationManager.AppSettings[\"DefaultUser\"]);");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 实例化iCommand,iAdapter,iDataSet和iConnection三个成员,比起无参数的构造函数，相当与多执行了一个Connect函数");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"vUser\">数据库用户名</param>");
        sb.AppendLine("//    public CDataBase(string vUser)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        iCommand = new OracleCommand();");
        sb.AppendLine("//        iCommand.BindByName = true;");
        sb.AppendLine("//        Connect(0, vUser);");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 实例化iCommand,iAdapter,iDataSet和iConnection三个成员,比起无参数的构造函数，相当与多执行了一个Connect函数");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"vUser\">数据库用户名</param>");
        sb.AppendLine("//    public CDataBase(int ai_DBIndex, string vUser)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        iCommand = new OracleCommand();");
        sb.AppendLine("//        iCommand.BindByName = true;");
        sb.AppendLine("//        Connect(ai_DBIndex, vUser);");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 释放托管与非托管资源");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"disposing\"></param>");
        sb.AppendLine("//    [System.Diagnostics.DebuggerNonUserCodeAttribute()]");
        sb.AppendLine("//    protected virtual void Dispose(bool disposing)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (!this.disposed)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            //释放非托管资源");
        sb.AppendLine("//            DisConnect();");
        sb.AppendLine("");
        sb.AppendLine("//            //释放托管资源");
        sb.AppendLine("//            if (disposing)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                iConnection.Dispose();");
        sb.AppendLine("//                iConnection = null;");
        sb.AppendLine("");
        sb.AppendLine("//                if (iTrans != null)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    iTrans.Dispose();");
        sb.AppendLine("//                    iTrans = null;");
        sb.AppendLine("//                }");
        sb.AppendLine("");
        sb.AppendLine("//                if (_iAdapter != null)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    _iAdapter.Dispose();");
        sb.AppendLine("//                    _iAdapter = null;");
        sb.AppendLine("//                }");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//                if (_iReader != null)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    _iReader.Dispose();");
        sb.AppendLine("//                    _iReader = null;");
        sb.AppendLine("//                }");
        sb.AppendLine("");
        sb.AppendLine("//                if (iCommand != null)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    iCommand.Dispose();");
        sb.AppendLine("//                    iCommand = null;");
        sb.AppendLine("//                }");
        sb.AppendLine("");
        sb.AppendLine("//                if (_iDataTable != null)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    _iDataTable.Dispose();");
        sb.AppendLine("//                    _iDataTable = null;");
        sb.AppendLine("//                }");
        sb.AppendLine("");
        sb.AppendLine("//            }");
        sb.AppendLine("");
        sb.AppendLine("//        }");
        sb.AppendLine("//        disposed = true;");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//    public void Dispose()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        Dispose(true);");
        sb.AppendLine("//        GC.SuppressFinalize(this);");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    ~CDataBase()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        Dispose(false);");
        sb.AppendLine("//    }");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("");
        sb.AppendLine("//    #region 服务器初始化用");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 获取指定数据库的DBUser个数");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"ai_DBIndex\">数据库索引号(在Web.config中配置的第ai_DBIndex个数据库)</param>");
        sb.AppendLine("//    /// <returns></returns>");
        sb.AppendLine("//    private static int GetDBUserCount(int ai_DBIndex)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        int count = 0;");
        sb.AppendLine("//        foreach (KeyValuePair<KeyValuePair<int, string>, string> ls_keyvalue in _dbuser)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            if (ls_keyvalue.Key.Key == ai_DBIndex)");
        sb.AppendLine("//                count++;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        return count;");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 删除指定数据库的所有DBUser");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"ai_DBIndex\">数据库索引号(在Web.config中配置的第ai_DBIndex个数据库)</param>");
        sb.AppendLine("//    private static void RemoveDBUser(int ai_DBIndex)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        foreach (KeyValuePair<KeyValuePair<int, string>, string> ls_keyvalue in _dbuser)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            if (ls_keyvalue.Key.Key == ai_DBIndex)");
        sb.AppendLine("//                _dbuser.Remove(ls_keyvalue.Key);");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    private static string GenConnectString(string as_ds, string as_dbuser, string as_password)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        string ls_constr;");
        sb.AppendLine("//        ls_constr = \"Data Source=\" + as_ds + \";User ID=\" + as_dbuser + \";Password=\" + as_password +");
        sb.AppendLine("//                    \";Pooling=false\" +             //true，则请求从连接池返回，没连接池则自动创建,默认值为true");
        sb.AppendLine("//            \";Enlist=true\";           　　//");
        sb.AppendLine("//        return \"Data Source=\" + as_ds + \";User ID=\" + as_dbuser + \";Password=\" + as_password + \";Pooling=true; Persist Security Info=True;\";");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 将字符转换为ＡＳＣ码");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"asciiCode\">字符</param>");
        sb.AppendLine("//    /// <returns>对应的ＡＳＣ码</returns>");
        sb.AppendLine("//    private static int Asc(string character)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (character.Length == 1)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            byte[] bytes = System.Text.Encoding.Default.GetBytes(character);");
        sb.AppendLine("//            int intAsciiCode = (int)bytes[0];");
        sb.AppendLine("//            return (intAsciiCode);");
        sb.AppendLine("//        }");
        sb.AppendLine("//        else");
        sb.AppendLine("//        {");
        sb.AppendLine("//            throw new Exception(\"字符的长度不对\");");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 返回字符串的长度（包括汉字），汉字长度为2");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"yourstring\">源字符串</param>");
        sb.AppendLine("//    /// <returns>字符串</returns>");
        sb.AppendLine("//    private static int f_length(string yourstring)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (string.IsNullOrEmpty(yourstring)) return 0;");
        sb.AppendLine("//        int len = yourstring.Length;");
        sb.AppendLine("//        byte[] sarr = System.Text.Encoding.Default.GetBytes(yourstring);");
        sb.AppendLine("//        return sarr.Length;");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 从左边开始取len长个几个字符串");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"yourstring\">源字符串</param>");
        sb.AppendLine("//    /// <param name=\"len\">指定长度</param>");
        sb.AppendLine("//    /// <returns>字符串</returns>");
        sb.AppendLine("//    private static string f_left(string yourstring, int ai_len)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (ai_len <= 0) return string.Empty;");
        sb.AppendLine("//        if (string.IsNullOrEmpty(yourstring)) return string.Empty;");
        sb.AppendLine("//        int length = f_length(yourstring);");
        sb.AppendLine("//        if (length <= ai_len)");
        sb.AppendLine("//            return yourstring;");
        sb.AppendLine("//        else");
        sb.AppendLine("//        {");
        sb.AppendLine("//            int tmp = 0;");
        sb.AppendLine("//            int len = 0;");
        sb.AppendLine("//            int okLen = 0;");
        sb.AppendLine("//            int li_asc;");
        sb.AppendLine("//            string ls_return = string.Empty;");
        sb.AppendLine("//            for (int i = 0; i < length; i++)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                //获取asc码");
        sb.AppendLine("//                li_asc = Asc(yourstring.Substring(i, 1));");
        sb.AppendLine("//                if (li_asc > 127)");
        sb.AppendLine("//                    tmp += 2;");
        sb.AppendLine("//                else");
        sb.AppendLine("//                    len += 1;");
        sb.AppendLine("//                okLen += 1;");
        sb.AppendLine("//                if (tmp + len == ai_len)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    ls_return = yourstring.Substring(0, okLen);");
        sb.AppendLine("//                    break;");
        sb.AppendLine("//                }");
        sb.AppendLine("//                else if (tmp + len > ai_len)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    ls_return = yourstring.Substring(0, okLen - 1);");
        sb.AppendLine("//                    break;");
        sb.AppendLine("//                }");
        sb.AppendLine("//            }");
        sb.AppendLine("//            return ls_return;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 从指定文字开始取len长的字符串");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"yourstring\">源字符串</param>");
        sb.AppendLine("//    /// <param name=\"start\">开始的位置</param>");
        sb.AppendLine("//    /// <param name=\"len\">指定长度</param>");
        sb.AppendLine("//    /// <returns>字符串</returns>");
        sb.AppendLine("//    public static string f_mid(string yourstring, int start, int len)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (len <= 0 || start < 0) return string.Empty;");
        sb.AppendLine("//        if (string.IsNullOrEmpty(yourstring)) return string.Empty;");
        sb.AppendLine("//        if (yourstring.Length < start) return string.Empty;");
        sb.AppendLine("//        if (yourstring.Length <= start + len - 1)");
        sb.AppendLine("//            return yourstring.Substring(start - 1);");
        sb.AppendLine("//        else");
        sb.AppendLine("//            return yourstring.Substring(start - 1, len);");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 按固定数、随机数加密或解密");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"as_pass\"></param>");
        sb.AppendLine("//    /// <param name=\"ai_mod\">ai_mod = 0 固定数加密,ai_mod = 1 随机数加密,ai_mod = 2 解密</param>");
        sb.AppendLine("//    /// <returns>加／解密后的字符串</returns>");
        sb.AppendLine("//    private static string f_passwd2(string as_pass, int ai_mod)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (as_pass.Length > 23)");
        sb.AppendLine("//            return \"-\";");
        sb.AppendLine("//        int li_i, li_len, li_pos;");
        sb.AppendLine("//        string ls_cpu = \"\", ls_tmp = \"\", ls_ret = \"\";");
        sb.AppendLine("//        string[,] ls_pass = new string[14, 2];");
        sb.AppendLine("//        if (ai_mod == 0 || ai_mod == 1)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            if (string.IsNullOrEmpty(as_pass)) return \"\";");
        sb.AppendLine("//            as_pass = f_left(as_pass, 10);");
        sb.AppendLine("//            if (ai_mod == 1)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                ls_cpu = DateTime.Now.ToString(\"mmss\");");
        sb.AppendLine("//            }");
        sb.AppendLine("//            else");
        sb.AppendLine("//            {");
        sb.AppendLine("//                ls_cpu = f_left(System.Convert.ToString(System.Convert.ToDouble(f_length(as_pass)) / 0.000412), 4);     //不能改变");
        sb.AppendLine("//            }");
        sb.AppendLine("//            li_len = f_length(as_pass);");
        sb.AppendLine("//            ls_ret = as_pass + ls_cpu;");
        sb.AppendLine("//            for (li_i = 1; li_i <= 4; li_i++)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                li_pos = System.Convert.ToInt32(f_mid(ls_cpu, li_i, 1));");
        sb.AppendLine("//                li_pos = li_pos % (li_len + 4);");
        sb.AppendLine("//                if (li_pos == 0) li_pos = 1;");
        sb.AppendLine("//                ls_tmp = ls_tmp + f_mid(ls_ret, li_pos, 1);");
        sb.AppendLine("//                ls_pass[li_pos - 1, 1] = \"1\";");
        sb.AppendLine("//                li_pos = (9 - li_pos) % (li_len + 4);");
        sb.AppendLine("//                if (li_pos == 0) li_pos = 1;");
        sb.AppendLine("//                ls_pass[li_pos - 1, 1] = \"1\";");
        sb.AppendLine("//                ls_tmp = ls_tmp + f_mid(ls_ret, li_pos, 1);");
        sb.AppendLine("//            }");
        sb.AppendLine("//            for (li_i = 1; li_i <= li_len + 4; li_i++)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (ls_pass[li_i - 1, 1] == \"1\") continue;");
        sb.AppendLine("//                ls_tmp = ls_tmp + f_mid(ls_ret, li_i, 1);");
        sb.AppendLine("//            }");
        sb.AppendLine("//            ls_ret = System.Convert.ToString(li_len - 1) + ls_cpu + ls_tmp;");
        sb.AppendLine("//            return ls_ret;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        else if (ai_mod == 2)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            if (string.IsNullOrEmpty(as_pass)) return \"\";");
        sb.AppendLine("//            li_len = System.Convert.ToInt32(f_mid(as_pass, 1, 1)) + 1;");
        sb.AppendLine("//            ls_cpu = f_mid(as_pass, 2, 4);");
        sb.AppendLine("//            ls_ret = f_mid(as_pass, 6, f_length(as_pass));");
        sb.AppendLine("//            for (li_i = 1; li_i <= 4; li_i++)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                li_pos = System.Convert.ToInt32(f_mid(ls_cpu, li_i, 1));");
        sb.AppendLine("//                li_pos = li_pos % (li_len + 4);");
        sb.AppendLine("//                if (li_pos == 0) li_pos = 1;");
        sb.AppendLine("//                ls_pass[li_pos - 1, 1] = \"1\";");
        sb.AppendLine("//                ls_pass[li_pos - 1, 0] = f_mid(ls_ret, 2 * li_i - 1, 1);");
        sb.AppendLine("//                li_pos = (9 - li_pos) % (li_len + 4);");
        sb.AppendLine("//                li_pos = li_pos % (li_len + 4);");
        sb.AppendLine("//                if (li_pos == 0) li_pos = 1;");
        sb.AppendLine("//                ls_pass[li_pos - 1, 1] = \"1\";");
        sb.AppendLine("//                ls_pass[li_pos - 1, 0] = f_mid(ls_ret, 2 * li_i, 1);");
        sb.AppendLine("//            }");
        sb.AppendLine("//            li_pos = 9;");
        sb.AppendLine("//            for (li_i = 1; li_i <= li_len; li_i++)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (ls_pass[li_i - 1, 1] == \"1\")");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    //null ");
        sb.AppendLine("//                }");
        sb.AppendLine("//                else");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    ls_pass[li_i - 1, 0] = f_mid(ls_ret, li_pos, 1);");
        sb.AppendLine("//                    li_pos++;");
        sb.AppendLine("//                }");
        sb.AppendLine("//                ls_tmp = ls_tmp + ls_pass[li_i - 1, 0];");
        sb.AppendLine("//            }");
        sb.AppendLine("//            return ls_tmp;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        else");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return as_pass;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 生成指定数据库的DBUser的配置信息（必须是使用温一医DBUser结构的）");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"ai_DBIndex\">数据库索引号(在Web.config中配置的第ai_DBIndex个数据库)</param>");
        sb.AppendLine("//    /// <param name=\"ab_IsForceUpdated\">是否强制重新获取信息</param>");
        sb.AppendLine("//    private static void GetDBUserData(int ai_DBIndex, Boolean ab_IsForceUpdated)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        lock (_dbuser)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            if (GetDBUserCount(ai_DBIndex) > 0 && ab_IsForceUpdated == false) //有数据而且不要求强制更新");
        sb.AppendLine("//            {");
        sb.AppendLine("//                return;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            else");
        sb.AppendLine("//            {");
        sb.AppendLine("//                RemoveDBUser(ai_DBIndex);");
        sb.AppendLine("//            }");
        sb.AppendLine("//            string ls_constr, ls_ds, ls_dbuser, ls_pwd;");
        sb.AppendLine("//            NameValueCollection app = System.Configuration.ConfigurationManager.AppSettings;");
        sb.AppendLine("//            //取预连接信息");
        sb.AppendLine("//            ls_ds = app[\"dbservername\" + ai_DBIndex.ToString()];");
        sb.AppendLine("//            ls_dbuser = app[\"predbuser\"];");
        sb.AppendLine("//            ls_pwd = app[\"predbpwd\"];");
        sb.AppendLine("//            ls_constr = GenConnectString(ls_ds, ls_dbuser, ls_pwd);");
        sb.AppendLine("//            //预连接数据库获取数据库用户信息");
        sb.AppendLine("//            using (OracleConnection con = new OracleConnection(ls_constr))");
        sb.AppendLine("//            {");
        sb.AppendLine("");
        sb.AppendLine("//                OracleCommand cmd = new OracleCommand(\"select sjkyhm,sjkmm from vi_sjkyh\", con);");
        sb.AppendLine("//                con.Open();");
        sb.AppendLine("//                OracleDataAdapter iAdapter = new OracleDataAdapter();");
        sb.AppendLine("//                OracleDataReader odr = cmd.ExecuteReader();");
        sb.AppendLine("//                DataTable ldt = new DataTable();");
        sb.AppendLine("//                ldt.Columns.Add(\"name\");");
        sb.AppendLine("//                ldt.Columns.Add(\"password\");");
        sb.AppendLine("//                ldt.PrimaryKey = new DataColumn[] { ldt.Columns[0] };");
        sb.AppendLine("//                while (odr.Read())");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    DataRow ldr = ldt.NewRow();");
        sb.AppendLine("//                    ldr[0] = f_passwd2(odr.GetString(0), 2).ToLower().Trim();");
        sb.AppendLine("//                    ldr[1] = f_passwd2(odr.GetString(1), 2);");
        sb.AppendLine("//                    ldt.Rows.Add(ldr);");
        sb.AppendLine("//                }");
        sb.AppendLine("//                odr.Close();");
        sb.AppendLine("//                foreach (DataRowView ldrv in ldt.DefaultView)");
        sb.AppendLine("//                {");
        sb.AppendLine("//                    ml_dbuser luser = new ml_dbuser();");
        sb.AppendLine("//                    luser.DBIndex = ai_DBIndex;");
        sb.AppendLine("//                    luser.DataBaseServerName = ls_ds;");
        sb.AppendLine("//                    luser.Name = ldrv[0].ToString();");
        sb.AppendLine("//                    luser.Password = ldrv[1].ToString();");
        sb.AppendLine("//                    luser.Alias = app[luser.Name];");
        sb.AppendLine("//                    if (string.IsNullOrEmpty(luser.Alias))");
        sb.AppendLine("//                        luser.ConnectString = GenConnectString(ls_ds, luser.Name, luser.Password);");
        sb.AppendLine("//                    else");
        sb.AppendLine("//                    {");
        sb.AppendLine("//                        DataRow ldr_row = ldt.Rows.Find(luser.Alias.ToLower());");
        sb.AppendLine("//                        if (ldr_row != null)");
        sb.AppendLine("//                            luser.Password = ldr_row[1].ToString();");
        sb.AppendLine("//                        luser.ConnectString = GenConnectString(ls_ds, luser.Alias, luser.Password);");
        sb.AppendLine("");
        sb.AppendLine("//                    }");
        sb.AppendLine("//                    _dbuser.Add(new KeyValuePair<int, string>(ai_DBIndex, luser.Name), luser.ConnectString);");
        sb.AppendLine("//                }");
        sb.AppendLine("");
        sb.AppendLine("//                if (con.State == ConnectionState.Open) con.Close();");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 设置数据库用户及连接字符串于静态变量DbConnection中");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <returns>true/false</returns>");
        sb.AppendLine("//    public static bool SetDBUser()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("//            GetDBUserData(0, false);");
        sb.AppendLine("//        }");
        sb.AppendLine("//        catch");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return false;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        return true;");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 返回Oracle连接");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"as_dbuser\">数据库连接用户名</param>");
        sb.AppendLine("//    /// <returns>OracleConnection/null</returns>");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("//    #region 连接、断开数据库、获取数据库连接");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 不带参数的实例化本类后，需执行本函数成功后，才能执行SetReader和SetDataSet");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"vUser\">数据库用户名</param>");
        sb.AppendLine("//    /// <returns>true成功，false异常</returns>");
        sb.AppendLine("//    public void Connect(String vUser)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        Connect(0, vUser);");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public void Connect(int vDBIndex, string vUser)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        iConnection = CDataBase.GetConnection(vDBIndex, vUser);");
        sb.AppendLine("//        iConnection.Open();");
        sb.AppendLine("//        iCommand.Connection = iConnection;");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 断开iConnecton的连接");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <returns></returns>");
        sb.AppendLine("//    /// ");
        sb.AppendLine("//    [System.Diagnostics.DebuggerNonUserCodeAttribute()]");
        sb.AppendLine("//    public void DisConnect()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (iTrans != null)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            if (iTrans.Connection != null)");
        sb.AppendLine("//                iTrans.Rollback();");
        sb.AppendLine("//        }");
        sb.AppendLine("//        if (iConnection != null) iConnection.Close();");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//        _SqlCode = 0;");
        sb.AppendLine("//        _SqlNRows = 0;");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 默认连接第一个配置");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"as_dbuser\"></param>");
        sb.AppendLine("//    /// <returns></returns>");
        sb.AppendLine("//    public static OracleConnection GetConnection(string as_dbuser)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        return GetConnection(0, as_dbuser);");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 连接指定配置的数据库");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"ai_DBIndex\"></param>");
        sb.AppendLine("//    /// <param name=\"as_dbuser\"></param>");
        sb.AppendLine("//    /// <returns></returns>");
        sb.AppendLine("//    public static OracleConnection GetConnection(int ai_DBIndex, string as_dbuser)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (GetDBUserCount(ai_DBIndex) <= 0)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            GetDBUserData(ai_DBIndex, false);");
        sb.AppendLine("//        }");
        sb.AppendLine("//        KeyValuePair<int, string> ls_keyvalue = new KeyValuePair<int, string>(ai_DBIndex, as_dbuser == null ? \"\" : as_dbuser.ToLower());");
        sb.AppendLine("//        if (_dbuser.ContainsKey(ls_keyvalue))");
        sb.AppendLine("//        {");
        sb.AppendLine("//            OracleConnection con = new OracleConnection(_dbuser[ls_keyvalue]);");
        sb.AppendLine("//            return con;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        else");
        sb.AppendLine("//        {");
        sb.AppendLine("//            throw new CustomException(CustomExceptionType.Serious, \"你使用的数据库用户\" + as_dbuser + \"不存在\");");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public static KeyValuePair<KeyValuePair<int, string>, string> GetDBUser(int ai_DBIndex, string as_dbuser)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (GetDBUserCount(ai_DBIndex) <= 0)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            GetDBUserData(ai_DBIndex, false);");
        sb.AppendLine("//        }");
        sb.AppendLine("//        KeyValuePair<int, string> ls_keyvalue = new KeyValuePair<int, string>(ai_DBIndex, as_dbuser == null ? \"\" : as_dbuser.ToLower());");
        sb.AppendLine("//        if (_dbuser.ContainsKey(ls_keyvalue))");
        sb.AppendLine("//            return new KeyValuePair<KeyValuePair<int, string>, string>(ls_keyvalue, _dbuser[ls_keyvalue]);");
        sb.AppendLine("//        else");
        sb.AppendLine("//        {");
        sb.AppendLine("//            throw new CustomException(CustomExceptionType.Serious, \"你使用的数据库用户\" + as_dbuser + \"不存在\");");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("");
        sb.AppendLine("//    #region 返回DataTable或DataReader");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 生成OracleDataReader类型的iReader");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"vSelectSql\">要执行的sql语句</param>");
        sb.AppendLine("//    /// <returns>OracleDataReader/null</returns>");
        sb.AppendLine("");
        sb.AppendLine("//    public OracleDataReader SetReader(String vSelectSql)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("//            iCommand.CommandText = vSelectSql;");
        sb.AppendLine("//            _iReader = iCommand.ExecuteReader();");
        sb.AppendLine("//            _SqlCode = 0;");
        sb.AppendLine("//            _SqlNRows = -1; //不确定几条记录");
        sb.AppendLine("//            return _iReader;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //catch (Oracle.DataAccess.Client.OracleException oracleException)");
        sb.AppendLine("//        //{");
        sb.AppendLine("//        //    if (oracleException.Number == 3113)");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        return SetReader(vSelectSql);");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //    else");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        throw oracleException;");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //}");
        sb.AppendLine("//        catch (Exception ex)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            throw ex;");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//    public DataTable SetDataTable(string vSql)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("//            iCommand.CommandText = vSql;");
        sb.AppendLine("//            if (_iAdapter == null) _iAdapter = new OracleDataAdapter();");
        sb.AppendLine("//            _iAdapter.SelectCommand = iCommand;");
        sb.AppendLine("//            DataTable ldt = new DataTable();");
        sb.AppendLine("//            _SqlNRows = _iAdapter.Fill(ldt);");
        sb.AppendLine("//            _iDataTable = ldt;");
        sb.AppendLine("//            _SqlCode = 0;");
        sb.AppendLine("//            return _iDataTable;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //catch (Oracle.DataAccess.Client.OracleException oracleException)");
        sb.AppendLine("//        //{");
        sb.AppendLine("//        //    if (oracleException.Number == 3113)");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        return SetDataTable(vSql);");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //    else");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        throw oracleException;");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //}");
        sb.AppendLine("//        catch (Exception ex)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            throw ex;");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public DataTable SetDataTable(string vSql, bool ForUpdate)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("//            iCommand.CommandText = vSql;");
        sb.AppendLine("//            if (_iAdapter == null) _iAdapter = new OracleDataAdapter();");
        sb.AppendLine("//            if (ForUpdate) _DataTableSelectCommand = (OracleCommand)iCommand.Clone();");
        sb.AppendLine("//            _iAdapter.SelectCommand = iCommand;");
        sb.AppendLine("//            DataTable ldt = new DataTable();");
        sb.AppendLine("//            _SqlNRows = _iAdapter.Fill(ldt);");
        sb.AppendLine("//            _iDataTable = ldt;");
        sb.AppendLine("//            _SqlCode = 0;");
        sb.AppendLine("//            return _iDataTable;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //catch (Oracle.DataAccess.Client.OracleException oracleException)");
        sb.AppendLine("//        //{");
        sb.AppendLine("//        //    if (oracleException.Number == 3113)");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        return SetDataTable(vSql, ForUpdate);");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //    else");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        throw oracleException;");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //}");
        sb.AppendLine("//        catch (Exception ex)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            throw ex;");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public DataTable SetDataTable(string vSql, int startRecord, int maxRecords)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("//            iCommand.CommandText = vSql;");
        sb.AppendLine("//            if (_iAdapter == null) _iAdapter = new OracleDataAdapter();");
        sb.AppendLine("//            _iAdapter.SelectCommand = iCommand;");
        sb.AppendLine("//            DataTable ldt = new DataTable();");
        sb.AppendLine("//            _SqlNRows = _iAdapter.Fill(startRecord, maxRecords, ldt);");
        sb.AppendLine("//            _iDataTable = ldt;");
        sb.AppendLine("//            _SqlCode = 0;");
        sb.AppendLine("//            return _iDataTable;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //catch (Oracle.DataAccess.Client.OracleException oracleException)");
        sb.AppendLine("//        //{");
        sb.AppendLine("//        //    if (oracleException.Number == 3113)");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        return SetDataTable( vSql,  startRecord,  maxRecords);");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //    else");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        throw oracleException;");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //}");
        sb.AppendLine("//        catch (Exception ex)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            throw ex;");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    public DataTable SetDataTable(string vSql, int startRecord, int maxRecords, bool ForUpdate)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("//            iCommand.CommandText = vSql;");
        sb.AppendLine("//            if (_iAdapter == null) _iAdapter = new OracleDataAdapter();");
        sb.AppendLine("//            if (ForUpdate) _DataTableSelectCommand = (OracleCommand)iCommand.Clone();");
        sb.AppendLine("//            _iAdapter.SelectCommand = iCommand;");
        sb.AppendLine("//            DataTable ldt = new DataTable();");
        sb.AppendLine("//            _SqlNRows = _iAdapter.Fill(startRecord, maxRecords, ldt);");
        sb.AppendLine("//            _iDataTable = ldt;");
        sb.AppendLine("//            _SqlCode = 0;");
        sb.AppendLine("//            return _iDataTable;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //catch (Oracle.DataAccess.Client.OracleException oracleException)");
        sb.AppendLine("//        //{");
        sb.AppendLine("//        //    if (oracleException.Number == 3113)");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        return SetDataTable( vSql,  startRecord,  maxRecords,  ForUpdate);");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //    else");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        throw oracleException;");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //}");
        sb.AppendLine("//        catch (Exception ex)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            throw ex;");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 自动把iDataTable中改动，插入的数据同步到数据库");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <returns>同步的记录数</returns>");
        sb.AppendLine("//    public int UpdateDataTable()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (_iDataTable == null || _DataTableSelectCommand == null) return 0;");
        sb.AppendLine("//        return UpdateDataTable(_iDataTable);");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public int UpdateDataTable(DataTable aDataTable)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (_iDataTable == null || _DataTableSelectCommand == null) return 0;");
        sb.AppendLine("//        _iAdapter.SelectCommand = _DataTableSelectCommand;");
        sb.AppendLine("//        OracleCommandBuilder builder = new OracleCommandBuilder(_iAdapter);");
        sb.AppendLine("//        return _iAdapter.Update(aDataTable);");
        sb.AppendLine("//    }");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("");
        sb.AppendLine("//    #region 执行sql语句或存储过程");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 执行sql语句");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"vSQL\">SQL语句,</param>");
        sb.AppendLine("//    /// <returns>select语句返回第一行第一例的值，其他返回null</returns>");
        sb.AppendLine("//    public object ExeSQL(string vSQL)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        string ls_sql;");
        sb.AppendLine("//        object lo_obj = null;");
        sb.AppendLine("//        ls_sql = vSQL.Trim();");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("//            iCommand.CommandType = CommandType.Text;");
        sb.AppendLine("//            switch (ls_sql.Substring(0, 6).ToUpper())");
        sb.AppendLine("//            {");
        sb.AppendLine("//                case \"SELECT\":");
        sb.AppendLine("//                    iCommand.CommandText = ls_sql;");
        sb.AppendLine("//                    lo_obj = iCommand.ExecuteScalar();");
        sb.AppendLine("//                    if (lo_obj == null)");
        sb.AppendLine("//                    {");
        sb.AppendLine("//                        _SqlCode = 0;");
        sb.AppendLine("//                        _SqlNRows = 0;");
        sb.AppendLine("//                    }");
        sb.AppendLine("//                    else");
        sb.AppendLine("//                    {");
        sb.AppendLine("//                        if (lo_obj == DBNull.Value) lo_obj = null;");
        sb.AppendLine("//                        _SqlCode = 0;");
        sb.AppendLine("//                        _SqlNRows = 1;");
        sb.AppendLine("//                    }");
        sb.AppendLine("//                    break;");
        sb.AppendLine("//                case \"UPDATE\":");
        sb.AppendLine("//                    if (iTrans == null)");
        sb.AppendLine("//                        iTrans = iConnection.BeginTransaction();");
        sb.AppendLine("//                    else");
        sb.AppendLine("//                    {");
        sb.AppendLine("//                        if (iTrans.Connection == null)");
        sb.AppendLine("//                            iTrans = iConnection.BeginTransaction();");
        sb.AppendLine("//                    }");
        sb.AppendLine("//                    iCommand.CommandText = vSQL;");
        sb.AppendLine("//                    _SqlNRows = iCommand.ExecuteNonQuery();");
        sb.AppendLine("//                    _SqlCode = 0;");
        sb.AppendLine("//                    break;");
        sb.AppendLine("//                case \"INSERT\":");
        sb.AppendLine("//                    if (iTrans == null)");
        sb.AppendLine("//                        iTrans = iConnection.BeginTransaction();");
        sb.AppendLine("//                    else");
        sb.AppendLine("//                    {");
        sb.AppendLine("//                        if (iTrans.Connection == null)");
        sb.AppendLine("//                            iTrans = iConnection.BeginTransaction();");
        sb.AppendLine("//                    }");
        sb.AppendLine("//                    iCommand.CommandText = vSQL;");
        sb.AppendLine("//                    _SqlNRows = iCommand.ExecuteNonQuery();");
        sb.AppendLine("//                    _SqlCode = 0;");
        sb.AppendLine("//                    break;");
        sb.AppendLine("//                case \"DELETE\":");
        sb.AppendLine("//                    if (iTrans == null)");
        sb.AppendLine("//                        iTrans = iConnection.BeginTransaction();");
        sb.AppendLine("//                    else");
        sb.AppendLine("//                    {");
        sb.AppendLine("//                        if (iTrans.Connection == null)");
        sb.AppendLine("//                            iTrans = iConnection.BeginTransaction();");
        sb.AppendLine("//                    }");
        sb.AppendLine("//                    iCommand.CommandText = vSQL;");
        sb.AppendLine("//                    _SqlNRows = iCommand.ExecuteNonQuery();");
        sb.AppendLine("//                    _SqlCode = 0;");
        sb.AppendLine("//                    break;");
        sb.AppendLine("//                default:");
        sb.AppendLine("//                    iCommand.CommandText = vSQL;");
        sb.AppendLine("//                    _SqlNRows = iCommand.ExecuteNonQuery();");
        sb.AppendLine("//                    _SqlCode = 0;");
        sb.AppendLine("//                    break;");
        sb.AppendLine("//            }");
        sb.AppendLine("//            return lo_obj;");
        sb.AppendLine("");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //catch (Oracle.DataAccess.Client.OracleException oracleException)");
        sb.AppendLine("//        //{");
        sb.AppendLine("//        //    if (oracleException.Number == 3113)");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        return ExeSQL( vSQL);");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //    else");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        throw oracleException;");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //}");
        sb.AppendLine("//        catch (Exception e)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            _SqlCode = -1;");
        sb.AppendLine("//            _SqlNRows = 0;");
        sb.AppendLine("//            _SqlErrorText = e.Message;");
        sb.AppendLine("//            throw e;");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("//    public void ExecProcedure(string vProcedureName)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("//            if (iTrans == null)");
        sb.AppendLine("//                iTrans = iConnection.BeginTransaction();");
        sb.AppendLine("//            else");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (iTrans.Connection == null)");
        sb.AppendLine("//                    iTrans = iConnection.BeginTransaction();");
        sb.AppendLine("//            }");
        sb.AppendLine("//            iCommand.CommandType = CommandType.StoredProcedure;");
        sb.AppendLine("//            iCommand.CommandText = vProcedureName;");
        sb.AppendLine("//            _SqlNRows = iCommand.ExecuteNonQuery();");
        sb.AppendLine("//            _SqlCode = 0;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //catch (Oracle.DataAccess.Client.OracleException oracleException)");
        sb.AppendLine("//        //{");
        sb.AppendLine("//        //    if (oracleException.Number == 3113)");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        ExecProcedure(vProcedureName);");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //    else");
        sb.AppendLine("//        //    {");
        sb.AppendLine("//        //        throw oracleException;");
        sb.AppendLine("//        //    }");
        sb.AppendLine("//        //}");
        sb.AppendLine("//        catch (Exception e)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            _SqlCode = -1;");
        sb.AppendLine("//            _SqlNRows = 0;");
        sb.AppendLine("//            _SqlErrorText = e.Message;");
        sb.AppendLine("//            throw e;");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("//    #region 事务处理");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 提交事务");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <returns>返回true成功；返回false失败</returns>");
        sb.AppendLine("//    public void Commit()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (iTrans != null)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            if (iTrans.Connection != null)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                iTrans.Commit();");
        sb.AppendLine("//                _SqlCode = 0;");
        sb.AppendLine("//                _SqlNRows = -1;");
        sb.AppendLine("");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        else//select 结束事物提交");
        sb.AppendLine("//        {");
        sb.AppendLine("//            if (iConnection != null && iConnection.State == ConnectionState.Open)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                ExeSQL(\"commit\");");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 回滚事务");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <returns>返回true成功；返回false失败</returns>");
        sb.AppendLine("//    public void Rollback()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        if (iTrans != null)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            if (iTrans.Connection != null)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                iTrans.Rollback();");
        sb.AppendLine("//                _SqlCode = 0;");
        sb.AppendLine("//                _SqlNRows = -1;");
        sb.AppendLine("");
        sb.AppendLine("//            }");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("//    #region 数据连接后的特殊服务，如获取时间、拼音五笔和序列值");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 获取数据库时间，失败则以应用服务器的时间代替");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <returns></returns>");
        sb.AppendLine("//    public DateTime GetDBDateTime()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return (DateTime)ExeSQL(\"select sysdate from dual\");");
        sb.AppendLine("//        }");
        sb.AppendLine("//        catch");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return DateTime.Now;");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 获取拼音五笔");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"yourstring\"></param>");
        sb.AppendLine("//    /// <param name=\"strpy\"></param>");
        sb.AppendLine("//    /// <param name=\"strwb\"></param>");
        sb.AppendLine("//    /// <returns></returns>");
        sb.AppendLine("//    public void f_GetPyWb(string yourstring, out string strpy, out string strwb)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        strpy = string.Empty;");
        sb.AppendLine("//        strwb = string.Empty;");
        sb.AppendLine("//        if (string.IsNullOrEmpty(yourstring))");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        string strchar = string.Empty;");
        sb.AppendLine("//        for (int i = 0; i < yourstring.Length; i++)");
        sb.AppendLine("//        {");
        sb.AppendLine("");
        sb.AppendLine("//            strchar = yourstring.Substring(i, 1);");
        sb.AppendLine("//            SetReader(\"SELECT py,wb FROM xtgl_pywb WHERE xtgl_pywb.zf = '\" + strchar + \"'\");");
        sb.AppendLine("//            if (_iReader.HasRows)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                _iReader.Read();");
        sb.AppendLine("//                strpy = String.Concat(strpy, _iReader[\"py\"].ToString());");
        sb.AppendLine("//                strwb = String.Concat(strwb, _iReader[\"wb\"].ToString());");
        sb.AppendLine("//            }");
        sb.AppendLine("//            _iReader.Close();");
        sb.AppendLine("//        }");
        sb.AppendLine("");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 获取指定序列的NextValue");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"vSequenceName\">序列名</param>");
        sb.AppendLine("//    /// <returns></returns>");
        sb.AppendLine("//    public Int64 GetNextValue(string vSequenceName)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        iCommand.CommandText = \"select \" + vSequenceName.Trim() + \".nextval from dual\";");
        sb.AppendLine("//        object lo_obj = iCommand.ExecuteScalar();");
        sb.AppendLine("//        if (lo_obj == null)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            _SqlCode = 0;");
        sb.AppendLine("//            _SqlNRows = 0;");
        sb.AppendLine("//            return -1;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        else");
        sb.AppendLine("//        {");
        sb.AppendLine("//            _SqlCode = 0;");
        sb.AppendLine("//            _SqlNRows = 1;");
        sb.AppendLine("//            return Convert.ToInt64(lo_obj);");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// ");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"as_tablename\"></param>");
        sb.AppendLine("//    /// <param name=\"as_colname\"></param>");
        sb.AppendLine("//    /// <returns></returns>");
        sb.AppendLine("//    public long GetNextValue(string as_tablename, string as_colname)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        iCommand.CommandText = string.Format(\"select max({0}) from {1}\", as_tablename, as_colname);");
        sb.AppendLine("//        object lo_obj = iCommand.ExecuteScalar();");
        sb.AppendLine("//        if (lo_obj == null || lo_obj == DBNull.Value)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            _SqlCode = 0;");
        sb.AppendLine("//            _SqlNRows = 1;");
        sb.AppendLine("//            return 1;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        else");
        sb.AppendLine("//        {");
        sb.AppendLine("//            _SqlCode = 0;");
        sb.AppendLine("//            _SqlNRows = 1;");
        sb.AppendLine("//            return (Convert.ToInt64(lo_obj) + 1);");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("");
        sb.AppendLine("//    #region 静态函数 一个事务多条Sql语句");
        sb.AppendLine("//    /// <summary>");
        sb.AppendLine("//    /// 事务操作(不能用于Blob类型)");
        sb.AppendLine("//    /// </summary>");
        sb.AppendLine("//    /// <param name=\"sql\">sql语句(不加;)字符串数组(定长)</param>");
        sb.AppendLine("//    /// <returns>true/false</returns>");
        sb.AppendLine("//    public static bool TransOperate(string[] as_sql, string as_dbuser)");
        sb.AppendLine("//    {");
        sb.AppendLine("//        int li_cnt = as_sql.Length;");
        sb.AppendLine("//        if (li_cnt <= 0)");
        sb.AppendLine("//        {");
        sb.AppendLine("//            return false;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        OracleConnection con = GetConnection(as_dbuser);");
        sb.AppendLine("//        con.Open();");
        sb.AppendLine("//        OracleTransaction trans = con.BeginTransaction();");
        sb.AppendLine("//        OracleCommand cmd = new OracleCommand();");
        sb.AppendLine("//        cmd.Connection = con;");
        sb.AppendLine("//        try");
        sb.AppendLine("//        {");
        sb.AppendLine("//            for (int i = 0; i < li_cnt; i++)");
        sb.AppendLine("//            {");
        sb.AppendLine("//                if (as_sql[i] == \"\" || as_sql[i] == null) continue;");
        sb.AppendLine("//                cmd.CommandText = as_sql[i];");
        sb.AppendLine("//                cmd.ExecuteNonQuery();");
        sb.AppendLine("//            }");
        sb.AppendLine("//            trans.Commit();");
        sb.AppendLine("//            return true;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        catch");
        sb.AppendLine("//        {");
        sb.AppendLine("//            trans.Rollback();");
        sb.AppendLine("//            return false;");
        sb.AppendLine("//        }");
        sb.AppendLine("//        finally");
        sb.AppendLine("//        {");
        sb.AppendLine("//            con.Close();");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//    #endregion");
        sb.AppendLine("");
        sb.AppendLine("//    internal void Connect()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        throw new NotImplementedException();");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    internal OracleDataReader SetReader()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        throw new NotImplementedException();");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    internal void Equals()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        throw new NotImplementedException();");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    internal void ExeSQL()");
        sb.AppendLine("//    {");
        sb.AppendLine("//        throw new NotImplementedException();");
        sb.AppendLine("//    }");
        sb.AppendLine("");
        sb.AppendLine("//    internal class ml_dbuser");
        sb.AppendLine("//    {");
        sb.AppendLine("//        private int _dbindex;");
        sb.AppendLine("//        private string _dbalias;");
        sb.AppendLine("//        private string _name;");
        sb.AppendLine("//        private string _alias;");
        sb.AppendLine("//        private string _password;");
        sb.AppendLine("//        private string _constr;");
        sb.AppendLine("//        //属于web.config中配置的第几个数据库");
        sb.AppendLine("//        public int DBIndex");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get { return _dbindex; }");
        sb.AppendLine("//            set { _dbindex = value; }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //系统内使用数据库名");
        sb.AppendLine("//        public string DataBaseServerName");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get { return _dbalias; }");
        sb.AppendLine("//            set { _dbalias = value; }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //系统内使用DB用户名");
        sb.AppendLine("//        public string Name");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get { return _name; }");
        sb.AppendLine("//            set { _name = value; }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //实际环境中数据库对应的DB用户名");
        sb.AppendLine("//        public string Alias");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get { return _alias; }");
        sb.AppendLine("//            set { _alias = value; }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //DB用户的密码");
        sb.AppendLine("//        public string Password");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get { return _password; }");
        sb.AppendLine("//            set { _password = value; }");
        sb.AppendLine("//        }");
        sb.AppendLine("//        //已经配置就绪的连接串");
        sb.AppendLine("//        public string ConnectString");
        sb.AppendLine("//        {");
        sb.AppendLine("//            get { return _constr; }");
        sb.AppendLine("//            set { _constr = value; }");
        sb.AppendLine("//        }");
        sb.AppendLine("//    }");
        sb.AppendLine("//}");
        sb.AppendLine("//#endregion");
        return sb.ToString();
    }
}
